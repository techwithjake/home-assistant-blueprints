blueprint:
  name: thermostat with 4 remote sensors and time intervals
  description: Set display helpers based on remote sensor and time of day. the automation will turn run on the interval specified in frequency and turn on the thermostat.
  domain: automation
  ## This Blueprint requires 3 helpers
  ## - one helper to be built as type dropdown with the following options: Heat, Cool, Idle - this is used for a more esily readable display on the dashbaord when looking at history
  ## - one helper to be built as type number with a min value of 0.5 a max of 5 and a step of 0.5 - this is used to adjust the heating temperature quickly and avoid the thermostat/AC from flapping
  ## - one helper to be built as type number with a min value of 0.5 a max of 5 and a step of 0.5 - this is used to adjust the cooling temperature quickly and avoid the thermostat/AC from flapping
  ## - one helper to be built as type text - this is used to display the currently in use sensor
  ## - one helper to be built as type number - this is used to display the target temp the automation is trying to use
  ## - one helper to be built as type number - this is used to display the heat tolerance adjusted target temp the automation is trying to use
  ## - one helper to be built as type number - this is used to display the cool tolerance adjusted target temp the automation is trying to use
  ## This blueprint is still a work in progress
  input:
    frequency:
      name: Frequency
      description: how often to check sensor status? 1, 5 or 10 minues. 1 min should be used for testing purposed with a generic thermostat
      selector:
        select:
          options:
            - /1
            - /5
            - /10
    thermostat:
      name: Thermostat
      description: Select the Thermostat
      selector:
        entity:
          domain: climate
    error_boolean_helper:
      name: error_boolean_helper
      description: Select the error testing helper
      selector:
        entity:
    cool_tolerance_helper:
      name: Tolerance for cooling
      description: Precision for heating target, when heating it will cause the thermostat to stop short of target temperature by this value. If target temp is 20 and this is set to 1 it will heat to 19.
      default: {}
      selector:
        entity:
    heat_tolerance_helper:
      name: Tolerance for heating
      description: Precision for cooling target, when cooling it will cause the thermostat to stop short of target temperature by this value. If target temp is 20 and this is set to 1 it will cool to 21.
      default: {}
      selector:
        entity:
    temp_current_sensor:
      name: Current Temp Sensor
      description: This helper will be updated to display the current temp sensor
      default: {}
      selector:
        entity:
    temp_current_temp:
      name: Current Temperature
      description: This helper will be updated to display the current temperature when the automation last ran
      default: {}
      selector:
        entity:
    temp_target_temp:
      name: Current Temp Target
      description: This helper will be updated to display the temperature target
      default: {}
      selector:
        entity:
    temp_adjusted_heat_temp:
      name: Heat Adjusted Temp Target
      description: This helper will be updated to display the heat tolerance adjusted temperature target
      default: {}
      selector:
        entity:
    temp_adjusted_cool_temp:
      name: Cool Adjusted Temp Target
      description: This helper will be updated to display the cool tolerance adjusted temperature target
      default: {}
      selector:
        entity:
    default_temp:
      name: default temperature
      description: in case of issues with sensors it will default to this value
      selector:
        number:
          min: 50
          max: 100
          step: 1
          unit_of_measurement: "°F"
    low_setpoint:
      name: low setpoint
      description: Low Setpoint - the lowest value to which it will allow temperature to drop - suggest value 15
      selector:
        number:
          min: 50
          max: 100
          step: 1
          unit_of_measurement: "°F"
    high_setpoint:
      name: high setpoint
      description: High Setpoint - the highest value to which it will allow temperature to rise - suggested value 30
      selector:
        number:
          min: 50
          max: 100
          step: 1
          unit_of_measurement: "°F"
    time_1:
      name: M-F first time
      description: first time interval of the day on Monday to Friday
      selector:
        time:
    target_temp_1:
      name: M-F first target temperature
      description: the thermostat will heat to target sensor 1 temp minus heat tolerance setting , or cool to sensor 1 temp plus cool tolerance setting  on Monday to Friday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_1:
      name: M-F first sensor
      description: first sensor to use for temperature on Monday to Friday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_2:
      name: M-F second time
      description: second time interval of the day on Monday to Friday
      selector:
        time:
    target_temp_2:
      name: M-F second target temperature
      description: the thermostat will heat to target sensor 2 temp minus heat tolerance setting , or cool to sensor 2 temp plus cool tolerance setting on Monday to Friday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_2:
      name: M-F second sensor
      description: second sensor to use for temperature on Monday to Friday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_3:
      name: M-F third time
      description: third time interval of the day on Monday to Friday
      selector:
        time:
    target_temp_3:
      name: M-F third target temperature
      description: the thermostat will heat to target sensor 3 temp minus heat tolerance setting, or cool to sensor 3 temp plus cool tolerance setting on Monday to Friday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_3:
      name: M-F third sensor
      description: third sensor to use for temperature on Monday to Friday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_4:
      name: M-F fourth time
      description: fourth time interval of the day on Monday to Friday
      selector:
        time:
    target_temp_4:
      name: M-F fourth target temperature
      description: the thermostat will heat to target sensor 4 temp minus heat tolerance setting, or cool to sensor 4 temp plus cool tolerance setting on Monday to Friday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_4:
      name: M-F fourth sensor
      description: fourth sensor to use for temperature on Monday to Friday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_1_ss:
      name: S-S first time
      description: first time interval of the day on Saturday and Sunday
      selector:
        time:
    target_temp_1_ss:
      name: S-S first target temperature
      description: the thermostat will heat to target sensor 1 temp minus heat tolerance setting, or cool to sensor 1 temp plus cool tolerance setting on Saturday and Sunday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_1_ss:
      name: S-S first sensor
      description: first sensor to use for temperature on Saturday and Sunday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_2_ss:
      name: S-S second time
      description: second time interval of the day on Saturday and Sunday
      selector:
        time:
    target_temp_2_ss:
      name: S-S second target temperature
      description: the thermostat will heat to target sensor 2 temp minus heat tolerance setting, or cool to sensor 2 temp plus cool tolerance setting on Saturday and Sunday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_2_ss:
      name: S-S second sensor
      description: second sensor to use for temperature on Saturday and Sunday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_3_ss:
      name: S-S third time
      description: third time interval of the day on Saturday and Sunday
      selector:
        time:
    target_temp_3_ss:
      name: S-S third target temperature
      description: the thermostat will heat to target sensor 3 temp minus heat tolerance setting, or cool to sensor 3 temp plus cool tolerance setting on Saturday and Sunday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_3_ss:
      name: S-S third sensor
      description: third sensor to use for temperature on Saturday and Sunday
      selector:
        entity:
          domain: sensor
          device_class: temperature
    time_4_ss:
      name: S-S fourth time
      description: fourth time interval of the day on Saturday and Sunday
      selector:
        time:
    target_temp_4_ss:
      name: S-S fourth target temperature
      description: the thermostat will heat to target sensor 4 temp minus heat tolerance setting, or cool to sensor 4 temp plus cool tolerance setting on Saturday and Sunday
      selector:
        number:
          min: 50
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
    sensor_4_ss:
      name: S-S fourth sensor
      description: fourth sensor to use for temperature on Saturday and Sunday
      selector:
        entity:
          domain: sensor
          device_class: temperature

trigger:
  - platform: time_pattern
    minutes: !input frequency
  - platform: state
    entity_id:
      - !input cool_tolerance_helper
      - !input heat_tolerance_helper

action:
  - variables:
      temp_current_sensor: !input temp_current_sensor
      temp_current_temp: !input temp_current_temp
      temp_target_temp: !input temp_target_temp
      temp_adjusted_heat_temp: !input temp_adjusted_heat_temp
      temp_adjusted_cool_temp: !input temp_adjusted_cool_temp
      sensor_1: !input sensor_1
      sensor_2: !input sensor_2
      sensor_3: !input sensor_3
      sensor_4: !input sensor_4
      sensor_1_ss: !input sensor_1_ss
      sensor_2_ss: !input sensor_2_ss
      sensor_3_ss: !input sensor_3_ss
      sensor_4_ss: !input sensor_4_ss
      target_temp_1: !input target_temp_1
      target_temp_2: !input target_temp_2
      target_temp_3: !input target_temp_3
      target_temp_4: !input target_temp_4
      target_temp_1_ss: !input target_temp_1_ss
      target_temp_2_ss: !input target_temp_2_ss
      target_temp_3_ss: !input target_temp_3_ss
      target_temp_4_ss: !input target_temp_4_ss
      time_1: !input time_1
      time_2: !input time_2
      time_3: !input time_3
      time_4: !input time_4
      time_1_ss: !input time_1_ss
      time_2_ss: !input time_2_ss
      time_3_ss: !input time_3_ss
      time_4_ss: !input time_4_ss
      default_temp: !input default_temp
      default_temp_1: "{{ default_temp | float}}"
      current_sensor: >-
        {%- if (now().strftime('%H:%M:%S') >= time_1) and (now().strftime('%H:%M:%S') < time_2) and (now().weekday() < 5)-%}
          {{ sensor_1 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_2) and (now().strftime('%H:%M:%S') < time_3) and (now().weekday() < 5) -%}
          {{ sensor_2  }}
        {%- elif (now().strftime('%H:%M:%S') >= time_3) and (now().strftime('%H:%M:%S') < time_4) and (now().weekday() < 5) -%}
          {{ sensor_3  }}
        {%- elif (now().strftime('%H:%M:%S') >= time_4) or (now().strftime('%H:%M:%S') < time_1) and (now().weekday() < 5) -%}
          {{ sensor_4 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_1_ss) and (now().strftime('%H:%M:%S') < time_2_ss) and (now().weekday() >= 5) -%}
          {{ sensor_1_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_2_ss) and (now().strftime('%H:%M:%S') < time_3_ss) and (now().weekday() >= 5) -%}
          {{ sensor_2_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_3_ss) and (now().strftime('%H:%M:%S') < time_4_ss) and (now().weekday() >= 5) -%}
          {{ sensor_3_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_4_ss) or (now().strftime('%H:%M:%S') < time_1_ss) and (now().weekday() >= 5) -%}
          {{ sensor_4_ss }}
        {%- endif -%}
      current_temp: "{{ states(current_sensor) | float (default_temp) }}"
      current_temp_helper: "{{ current_sensor }}"
      current_target_temp: >-
        {%- if (now().strftime('%H:%M:%S') >= time_1) and (now().strftime('%H:%M:%S') < time_2) and (now().weekday() < 5)-%}
          {{ target_temp_1 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_2) and (now().strftime('%H:%M:%S') < time_3) and (now().weekday() < 5) -%}
          {{ target_temp_2 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_3) and (now().strftime('%H:%M:%S') < time_4) and (now().weekday() < 5) -%}
          {{ target_temp_3 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_4) or (now().strftime('%H:%M:%S') < time_1) and (now().weekday() < 5) -%}
          {{ target_temp_4 }}
        {%- elif (now().strftime('%H:%M:%S') >= time_1_ss) and (now().strftime('%H:%M:%S') < time_2_ss) and (now().weekday() >= 5) -%}
          {{ target_temp_1_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_2_ss) and (now().strftime('%H:%M:%S') < time_3_ss) and (now().weekday() >= 5) -%}
          {{ target_temp_2_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_3_ss) and (now().strftime('%H:%M:%S') < time_4_ss) and (now().weekday() >= 5) -%}
          {{ target_temp_3_ss }}
        {%- elif (now().strftime('%H:%M:%S') >= time_4_ss) or (now().strftime('%H:%M:%S') < time_1_ss) and (now().weekday() >= 5) -%}
          {{ target_temp_4_ss }}
        {%- endif -%}
      cool_tolerance_helper: !input cool_tolerance_helper
      heat_tolerance_helper: !input heat_tolerance_helper

      heat_temp: "{{ ((current_target_temp - states[heat_tolerance_helper].state |float) - current_temp) | round(2) }}"
      cool_temp: "{{ ((current_target_temp + states[cool_tolerance_helper].state |float) - current_temp) | round(2) }}"

      adjusted_heat: "{{ (current_target_temp - states[heat_tolerance_helper].state |float) | round(2) }}"
      adjusted_cool: "{{ (current_target_temp + states[cool_tolerance_helper].state |float) | round(2) }}"
      
      high_setpoint: !input high_setpoint
      low_setpoint: !input low_setpoint
      heat_low_setpoint: "{{ high_setpoint - 2 }}"
      cool_high_setpoint: "{{ low_setpoint + 2 }}"
      
      error_boolean_helper: !input error_boolean_helper

  - service: system_log.write
    data:
      message: >
        current_sensor: {{ current_sensor }},{{"\n"}}
        current_temp: {{ current_temp }},{{"\n"}}
        current_target_temp: {{ current_target_temp }},{{"\n"}}
        cool_tolerance_helper: {{ cool_tolerance_helper }},{{"\n"}}
        heat_tolerance_helper: {{ heat_tolerance_helper }},{{"\n"}}
        heat_temp: {{ heat_temp }},{{"\n"}}
        cool_temp: {{ cool_temp }},{{"\n"}}
        adjusted_heat: {{ adjusted_heat }},{{"\n"}}
        adjusted_cool: {{ adjusted_cool }},{{"\n"}}
        default_temp: {{ default_temp }},{{"\n"}}
        default_temp: {{ default_temp_1 }},{{"\n"}}
      level: debug
      logger: blueprints.briodan.thermostat
  - service: input_text.set_value
    data:
      entity_id: !input temp_current_sensor
      value: "{{ states[current_sensor].attributes.friendly_name }}"
  - service: input_number.set_value
    data:
      entity_id: !input temp_current_temp
      value: "{{ current_temp }}"
  - service: input_number.set_value
    data:
      entity_id: !input temp_target_temp
      value: "{{ current_target_temp }}"
  - service: input_number.set_value
    data:
      entity_id: !input temp_adjusted_cool_temp
      value: "{{ adjusted_cool }}"
  - service: input_number.set_value
    data:
      entity_id: !input temp_adjusted_heat_temp
      value: "{{ adjusted_heat }}"
  - choose:
      - conditions:
          - alias: heat
            condition: template
            value_template: >-
              {{ (heat_temp > 0) }}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input error_boolean_helper
            data:
              option: heat
          - service: climate.set_temperature
            data:
              target_temp_low: "{{ heat_low_setpoint }}"
              target_temp_high: !input high_setpoint
            target:
              entity_id: !input thermostat
      - conditions:
          - alias: cool
            condition: template
            value_template: >-
              {{ (cool_temp < 0) }}
        sequence:
          - service: input_select.select_option
            target:
              entity_id: !input error_boolean_helper
            data:
              option: cool
          - service: climate.set_temperature
            data:
              target_temp_low: !input low_setpoint
              target_temp_high: "{{ cool_high_setpoint }}"
            target:
              entity_id: !input thermostat
    default:
      - service: system_log.write
        data:
          message: >
            no conditions matched
          level: info
          logger: blueprints.briodan.thermostat
      - service: input_select.select_option
        target:
          entity_id: !input error_boolean_helper
        data:
          option: idle
